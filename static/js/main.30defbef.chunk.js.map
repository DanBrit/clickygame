{"version":3,"sources":["components/Container/Container.js","components/GameCard/GameCard.js","components/Instructions/Instructions.js","components/GameMessage/GameMessage.js","components/Header/Header.js","components/Footer/Footer.js","components/Game/Game.js","App.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","GameCard","role","aria-label","concat","animate","style","backgroundImage","image","onClick","handleClick","id","Instructions","Jumbotron","background-image","message","GameMessage","state","animating","renderMessage","_this","addAnimation","prevProps","newState","score","topScore","this","setState","_this2","onAnimationEnd","Component","Header","components_GameMessage_GameMessage","Footer","src","href","target","Game","data","shuffleDeck","sort","b","Math","random","resetDeck","resetData","map","item","Object","objectSpread","clicked","correctGuess","newData","newScore","newTopScore","max","animation","wrongGuess","gameCardClick","guessedCorrectly","components_Header_Header","components_Instructions_Instructions","components_Container_Container","components_GameCard_GameCard","key","components_Footer_Footer","App","components_Game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.30defbef.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <main className=\"container\">{props.children}</main>;\n\nexport default Container;","import React from \"react\";\nimport \"./GameCard.css\";\n\nconst GameCard = props => (\n    <div\n        role=\"img\"\n        aria-label=\"click item\"\n        className={`gameCard ${props.animate? \"animated wobble\": \"\"}`} \n        style={{ backgroundImage: `url(\"${props.image}\")` }}\n        onClick={() => props.handleClick(props.id)}\n    /> \n);\n\nexport default GameCard;","import React from \"react\";\nimport { Jumbotron } from 'reactstrap';\nimport \"./Instructions.css\";\n\nconst Instructions = (props) => (\n    <div className=\"jumbo\">\n        <Jumbotron style={{'background-image': `url(\"assets/images/pokemonbackground.gif\")`}} >\n            <h3 className=\" animated fadeInDown instructions\">{props.message}</h3>\n        </Jumbotron>\n    </div>\n);\n\nexport default Instructions;","import React, {Component} from \"react\";\nimport \"./GameMessage.css\";\n\nclass GameMessage extends Component {\n\n    state = {\n        animating: false,\n        message: \"\"\n    }\n\n    // function runs on every state change\n    componentDidUpdate(prevProps) {\n\n      // will be passed into setState function\n      let newState = {\n        animating: true\n      }\n\n      // deconstruct score and topScore from the pervious state\n      const {score, topScore} = prevProps\n\n      // change message if user guess correclty or incorrectly\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score !== 0 && topScore > 0) {\n        newState.message = \"correct\";\n      } else {\n        newState.message = \"incorrect\";\n      }\n\n      // set the state with the new message if the score changes, \n      // or the message and state message are not equal\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n  \n    }\n\n    // change the display message based on the message state\n    renderMessage = () => {\n        switch (this.state.message) {\n        case \"correct\":\n          return \"You guessed correctly!\";\n        case \"incorrect\":\n          return \"You guessed incorrectly!\";\n        default:\n          return \"Click a pokemon to begin!\";\n        }\n    };\n\n    // add animation class when animateClass state updates\n    // animations from aniamte.css library\n    addAnimation = () => {\n      switch (this.state.message) {\n        case \"correct\":\n          return \"animated pulse\";\n        case \"incorrect\":\n          return \"animated wobble\";\n        default:\n          return \"\";\n        }     \n    }\n\n    render() {\n        return(\n          <li \n            // if the state.aniamtion = true, add the class from animate.css to trigger the animation,\n            // also add the state.message as a class, which changes the color,\n            // if aniamtion.state = false, remove the aniamte.css class and add the '.black' class\n            className={` \n              gameMessage \n              ${this.state.animating? this.addAnimation(): \"\"}  \n              ${this.state.animating? this.state.message: \"black\"}\n            `}\n            id={`${this.state.message}`}\n            // set the animation state back to false after the classes are added\n            onAnimationEnd={() => this.setState({ animating: false })} \n          >\n            {this.renderMessage()}\n          </li>  \n        );\n    }\n}\n\nexport default GameMessage;","import React from \"react\";\nimport \"./Header.css\";\nimport GameMessage from \"../GameMessage\";\n\nconst Header = props => (\n    <div className=\"header\">\n        <ul>\n            <li><h2 className=\" title animated swing\">Pokemon Clicky</h2></li>\n            <GameMessage score={props.score} topScore={props.topScore} />\n            <li id=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\n        </ul>\n        \n    </div>\n)\n\nexport default Header;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"bottom\">\n            <ul id='footer-list'>\n                <li><span><img className='logo' id=\"reactLogo\" src=\"assets/images/react-logo.png\"/></span> Clicky Game!</li>\n                <li>Â© 2019 Daniel Marshall</li>\n                <li><a href=\"https://github.com/DanBrit/clickygame\" target=\"blank\"><span><img className='logo' src=\"assets/images/github.png\"/></span> Github</a></li>\n            </ul>\n        </div>\n    </footer>\n)\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Instructions from \"../Instructions\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport data from \"../../data\";\n\n\nclass Game extends Component {\n\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        message: \"Click as many images as you can without repeating\"\n    };\n\n    // function gets called when the page loads\n    componentDidMount() {\n        // reorders the dataarray on state changes\n        this.setState({ data: this.shuffleDeck(this.state.data) });\n    }\n\n    // shuffle the imported data array in random order\n    shuffleDeck = data => {\n        let newData = data.sort(function(a, b){return 0.5 - Math.random()});\n        return newData;\n    };\n\n    // resets all the clicked properties to false\n    resetDeck = data => {\n        const resetData = data.map(item => ({ ...item, clicked: false }));\n        // console.log(data);\n        // console.log(resetData);\n        return this.shuffleDeck(resetData);\n      };\n\n    // checks to see if score is higher than the topscore then updates the state with the update array\n    correctGuess = newData => {\n        let newScore = this.state.score;\n        newScore++\n        let newTopScore = Math.max(newScore, this.state.topScore);\n\n        this.setState({\n            data: this.shuffleDeck(newData),\n            score: newScore,\n            topScore: newTopScore,\n            animation: \"animated swing\"\n        })\n    }\n\n    // restarts the game with fresh data\n    wrongGuess = newData => {\n        this.setState({\n            data: this.resetDeck(newData),\n            score: 0\n        })\n    }\n\n    // when a card is clicked, check if it has been clicked before,\n    // then update that cards clicked property\n    gameCardClick = id => {\n        let guessedCorrectly = false;\n        // newData will be the data array with updated clicked properties\n        const newData = this.state.data.map(item => {\n          if (item.id === id) {\n            if (!item.clicked) {\n              item.clicked = true;\n              guessedCorrectly = true;\n            }\n          }\n          return item;     \n        });\n        // if guessedCorrectly = true, run the correctGuess function,\n        // else run the wrongGuess function\n        guessedCorrectly ? this.correctGuess(newData) : this.wrongGuess(newData);\n      };\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <Header score={this.state.score} topScore = {this.state.topScore} />\n                <Instructions message={this.state.message} />\n                <Container>\n                    {\n                        this.state.data.map(item => (\n                            <div className=\"animated rollIn\">\n                                <GameCard\n                                    key={item.id}\n                                    id={item.id} \n                                    image={item.image}\n                                    animate={!this.state.score && this.state.topScore}\n                                    clicked={item.clicked}\n                                    handleClick={this.gameCardClick}\n                                />      \n                            </div>  \n                        ))\n                    }\n                </Container>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game\" \n\nconst App = () => <Game/>;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//registerServiceWorker();\n"],"sourceRoot":""}